void merge(vector < int > & arr, int s,int e)
{
    int mid=(s+e)/2;
    int len1=mid-s+1;
    int len2=e-mid;

    int *arr1=new int[len1];
    int *arr2=new int[len2];

    int k=s;
    for(int i=0;i<len1;i++)
    {
        arr1[i]=arr[k++];
    }
    k=mid+1;
    for(int i=0;i<len2;i++)
    {
        arr2[i]=arr[k++];
    }

    int index1=0,index2=0,i=s;
    while(index1<len1 && index2<len2)
    {
        if(arr1[index1]<arr2[index2])
        {
            arr[i++]=arr1[index1++];
        }
        else{
            arr[i++]=arr2[index2++];
        }
    }
    while(index1<len1)
    {
        arr[i++]=arr1[index1++];
    }

     while(index2<len2)
    {
        arr[i++]=arr2[index2++];
    }
    delete []arr1;
    delete []arr2;

}
void sort(vector < int > & arr, int s,int e)
{
   
    if(s>=e)
    {
        return;
    }
     int mid=(s+e)/2;
    sort(arr,s,mid);
    sort(arr,mid+1,e);

    merge(arr,s,e);
}
void mergeSort(vector < int > & arr, int n) {
    // Write your code here.
    sort(arr,0,n-1);
    
}
